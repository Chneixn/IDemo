//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputBridge/DRockInputBrigeSample/Testing/TestPlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TestPlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TestPlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TestPlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControl"",
            ""id"": ""67cecd12-e8c0-4f35-9f35-00b35b8806d0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""88560b67-f889-4a43-a9bc-c7d74c1cd764"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""6bf4685e-e300-4aec-9f66-8d1b988cf2b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""c4b0b86f-ba39-4a7e-8a3d-d70acd4f3726"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""3c914d99-d558-44e9-9c11-5f746be1fb2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8711389-e197-4701-81ec-fba7720afbf8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b600fec4-4277-4668-a82f-055d396ed202"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""MoveDirection"",
                    ""id"": ""7751438e-e785-4ad8-86b9-fd9a1d093d50"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""88756dcb-354e-4c1b-9b67-8871377c9537"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""24bc1f67-e202-449f-89e9-d692e6b2b70a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0aaed6c7-0ecd-4d41-a2d1-cb35e6220072"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d602ef6c-aa30-47d7-a9d1-aae30e1bf70e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""62d557dd-8e7d-475d-81b3-ae13ae6fb9db"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04e16b93-c118-4bc3-b73a-73c46fdc872a"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbe72dc5-2140-4e74-a877-a583d5e84530"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb053456-ac37-4ed1-919d-fb1a39507d24"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InventoryInteraction"",
            ""id"": ""c8fea0e1-480a-44ed-8ecf-f2744e573701"",
            ""actions"": [
                {
                    ""name"": ""HotBar 1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""53988f93-9a66-43e7-a60a-485be895d02b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""265e134d-1002-4eaf-82fa-f7eb8b466133"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 3"",
                    ""type"": ""PassThrough"",
                    ""id"": ""16878c85-a858-4b92-9fd4-af1934dd6fe8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 4"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4ca794d6-fc82-49e4-b559-89cd36d94461"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 5"",
                    ""type"": ""PassThrough"",
                    ""id"": ""17bd88c2-351a-41fe-9e29-900a430c8119"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 6"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a16cf07c-80c5-486e-bf4d-31ebe87d4098"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 7"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a0d7dd03-0248-437d-bc77-0b1adf6a6f74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 8"",
                    ""type"": ""PassThrough"",
                    ""id"": ""13097236-1790-4201-b47f-3008782d89e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 9"",
                    ""type"": ""PassThrough"",
                    ""id"": ""fd41ea5f-9282-4471-b241-32738db9092f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar 0"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c0968472-1084-4e6b-8112-fdd38862cbb2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Wheel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""90d19069-3982-4ac7-87ed-0bb82b0b8ff3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use Item"",
                    ""type"": ""Button"",
                    ""id"": ""b533769e-d1f9-42d5-9e39-bd61acb44f42"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowBackpack"",
                    ""type"": ""Button"",
                    ""id"": ""8bde75ec-0cd4-4ecc-af2e-8249333c9120"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CloseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""97ec81dd-38dd-4a69-afa6-da8f33059cc9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""41129fa4-4095-4e97-a2c8-bc65c2581db4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bc1cc24e-7c06-4e06-b773-44cf54dbf67f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e39b137e-c625-465c-bdaf-85ae5f7bd77d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12aa67f1-ea36-4934-9ffb-c52df6eee805"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83acaeb3-3b59-498e-9a93-651271ee88b9"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40d0b201-cc2d-47ce-a055-6e8a2ab55e78"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad24ea0e-b82d-4575-a29a-e8fdda74ccae"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 6"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a5ce611-c511-4702-ba5a-0f33cb85cb62"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 7"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f2824bf-92ba-4b37-ad70-9689137a7500"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 8"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8793976-8652-4fa1-b234-c2b4cbcdc245"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4130280-00da-4d3b-9548-83a883f1a97c"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar 0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d7ee184-cfe3-46ea-9166-755118290084"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d663418d-17f8-40e2-8438-a65affeec71f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use Item"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15c34cae-6536-4574-9918-58b323fb8987"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ShowBackpack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""677969dc-d846-42cc-881b-da0fb2822dde"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2711c18c-c72d-40bc-a178-9a4f1981a736"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CloseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d827a84f-7dd9-4e99-b268-c097cc68f81e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WeaponControl"",
            ""id"": ""0f98a2a7-ecdd-48b7-af01-ff19b530a6d2"",
            ""actions"": [
                {
                    ""name"": ""QuickUse_0"",
                    ""type"": ""Button"",
                    ""id"": ""0a933c33-08b3-4d47-b21d-5c550b5cc6fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickUse_1"",
                    ""type"": ""Button"",
                    ""id"": ""e3baa31b-2f19-4bdc-98fc-929b3b3dd230"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickUse_2"",
                    ""type"": ""Button"",
                    ""id"": ""9218d0f0-3c7a-4bcb-8900-208854907440"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickUse_3"",
                    ""type"": ""Button"",
                    ""id"": ""ed2ca517-bc2d-4fc9-a868-13cd050510eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""QuickUse_4"",
                    ""type"": ""Button"",
                    ""id"": ""357997d6-cad0-412c-a412-5f9b273b36ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon"",
                    ""type"": ""PassThrough"",
                    ""id"": ""864b5fe3-723e-4ba8-a7a0-7f2eb87f0d3a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""975bdfb5-0348-451c-b19b-35b5eed44d7d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""3dbb4795-e63b-47ed-9f1b-e3c609cef929"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""0e37148a-f236-4dcf-b29f-db9af6cf7631"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7b418264-c591-4c7b-b91f-faeaa453f06b"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickUse_0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9c7f797-9c39-4e58-9af5-5aaa90e28895"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbad4192-10c8-4035-b706-631afbb6bdd6"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce4b4730-75fa-4086-9d83-57d266e383cf"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickUse_4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f727cc3b-ab89-45b9-8cf4-d9f8c245b6b1"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickUse_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""34e06f0f-b94c-4d85-a4cc-b0f61db056a7"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickUse_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""446dcfa0-231b-4597-bc61-09b32b773f36"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""QuickUse_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0203862d-6130-4136-8007-e4d74ba6fde3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33aefa61-4dbb-43fc-bb04-c407ff19c9be"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83e34537-df8c-465c-a2a7-e43b92c0a132"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""New action map"",
            ""id"": ""41ebcb40-89f8-40c4-8d02-e42e93b249c5"",
            ""actions"": [
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""264ea913-4581-48c4-9dce-54fd480246d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dfe3728f-d701-4606-a181-881f2911ec81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6876238a-9118-4381-9b48-5c4d9b498d43"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13f16edb-1d83-4a0b-aa9a-59bb4d62b097"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CharacterControl
        m_CharacterControl = asset.FindActionMap("CharacterControl", throwIfNotFound: true);
        m_CharacterControl_Movement = m_CharacterControl.FindAction("Movement", throwIfNotFound: true);
        m_CharacterControl_Jump = m_CharacterControl.FindAction("Jump", throwIfNotFound: true);
        m_CharacterControl_Look = m_CharacterControl.FindAction("Look", throwIfNotFound: true);
        m_CharacterControl_Switch = m_CharacterControl.FindAction("Switch", throwIfNotFound: true);
        // InventoryInteraction
        m_InventoryInteraction = asset.FindActionMap("InventoryInteraction", throwIfNotFound: true);
        m_InventoryInteraction_HotBar1 = m_InventoryInteraction.FindAction("HotBar 1", throwIfNotFound: true);
        m_InventoryInteraction_HotBar2 = m_InventoryInteraction.FindAction("HotBar 2", throwIfNotFound: true);
        m_InventoryInteraction_HotBar3 = m_InventoryInteraction.FindAction("HotBar 3", throwIfNotFound: true);
        m_InventoryInteraction_HotBar4 = m_InventoryInteraction.FindAction("HotBar 4", throwIfNotFound: true);
        m_InventoryInteraction_HotBar5 = m_InventoryInteraction.FindAction("HotBar 5", throwIfNotFound: true);
        m_InventoryInteraction_HotBar6 = m_InventoryInteraction.FindAction("HotBar 6", throwIfNotFound: true);
        m_InventoryInteraction_HotBar7 = m_InventoryInteraction.FindAction("HotBar 7", throwIfNotFound: true);
        m_InventoryInteraction_HotBar8 = m_InventoryInteraction.FindAction("HotBar 8", throwIfNotFound: true);
        m_InventoryInteraction_HotBar9 = m_InventoryInteraction.FindAction("HotBar 9", throwIfNotFound: true);
        m_InventoryInteraction_HotBar0 = m_InventoryInteraction.FindAction("HotBar 0", throwIfNotFound: true);
        m_InventoryInteraction_MouseWheel = m_InventoryInteraction.FindAction("Mouse Wheel", throwIfNotFound: true);
        m_InventoryInteraction_UseItem = m_InventoryInteraction.FindAction("Use Item", throwIfNotFound: true);
        m_InventoryInteraction_ShowBackpack = m_InventoryInteraction.FindAction("ShowBackpack", throwIfNotFound: true);
        m_InventoryInteraction_CloseMenu = m_InventoryInteraction.FindAction("CloseMenu", throwIfNotFound: true);
        m_InventoryInteraction_Interaction = m_InventoryInteraction.FindAction("Interaction", throwIfNotFound: true);
        // WeaponControl
        m_WeaponControl = asset.FindActionMap("WeaponControl", throwIfNotFound: true);
        m_WeaponControl_QuickUse_0 = m_WeaponControl.FindAction("QuickUse_0", throwIfNotFound: true);
        m_WeaponControl_QuickUse_1 = m_WeaponControl.FindAction("QuickUse_1", throwIfNotFound: true);
        m_WeaponControl_QuickUse_2 = m_WeaponControl.FindAction("QuickUse_2", throwIfNotFound: true);
        m_WeaponControl_QuickUse_3 = m_WeaponControl.FindAction("QuickUse_3", throwIfNotFound: true);
        m_WeaponControl_QuickUse_4 = m_WeaponControl.FindAction("QuickUse_4", throwIfNotFound: true);
        m_WeaponControl_SwitchWeapon = m_WeaponControl.FindAction("SwitchWeapon", throwIfNotFound: true);
        m_WeaponControl_Fire = m_WeaponControl.FindAction("Fire", throwIfNotFound: true);
        m_WeaponControl_Aim = m_WeaponControl.FindAction("Aim", throwIfNotFound: true);
        m_WeaponControl_Reload = m_WeaponControl.FindAction("Reload", throwIfNotFound: true);
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_Switch = m_Newactionmap.FindAction("Switch", throwIfNotFound: true);
        m_Newactionmap_Jump = m_Newactionmap.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControl
    private readonly InputActionMap m_CharacterControl;
    private List<ICharacterControlActions> m_CharacterControlActionsCallbackInterfaces = new List<ICharacterControlActions>();
    private readonly InputAction m_CharacterControl_Movement;
    private readonly InputAction m_CharacterControl_Jump;
    private readonly InputAction m_CharacterControl_Look;
    private readonly InputAction m_CharacterControl_Switch;
    public struct CharacterControlActions
    {
        private @TestPlayerInput m_Wrapper;
        public CharacterControlActions(@TestPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterControl_Movement;
        public InputAction @Jump => m_Wrapper.m_CharacterControl_Jump;
        public InputAction @Look => m_Wrapper.m_CharacterControl_Look;
        public InputAction @Switch => m_Wrapper.m_CharacterControl_Switch;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControlActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControlActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        private void UnregisterCallbacks(ICharacterControlActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        public void RemoveCallbacks(ICharacterControlActions instance)
        {
            if (m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControlActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControlActions @CharacterControl => new CharacterControlActions(this);

    // InventoryInteraction
    private readonly InputActionMap m_InventoryInteraction;
    private List<IInventoryInteractionActions> m_InventoryInteractionActionsCallbackInterfaces = new List<IInventoryInteractionActions>();
    private readonly InputAction m_InventoryInteraction_HotBar1;
    private readonly InputAction m_InventoryInteraction_HotBar2;
    private readonly InputAction m_InventoryInteraction_HotBar3;
    private readonly InputAction m_InventoryInteraction_HotBar4;
    private readonly InputAction m_InventoryInteraction_HotBar5;
    private readonly InputAction m_InventoryInteraction_HotBar6;
    private readonly InputAction m_InventoryInteraction_HotBar7;
    private readonly InputAction m_InventoryInteraction_HotBar8;
    private readonly InputAction m_InventoryInteraction_HotBar9;
    private readonly InputAction m_InventoryInteraction_HotBar0;
    private readonly InputAction m_InventoryInteraction_MouseWheel;
    private readonly InputAction m_InventoryInteraction_UseItem;
    private readonly InputAction m_InventoryInteraction_ShowBackpack;
    private readonly InputAction m_InventoryInteraction_CloseMenu;
    private readonly InputAction m_InventoryInteraction_Interaction;
    public struct InventoryInteractionActions
    {
        private @TestPlayerInput m_Wrapper;
        public InventoryInteractionActions(@TestPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @HotBar1 => m_Wrapper.m_InventoryInteraction_HotBar1;
        public InputAction @HotBar2 => m_Wrapper.m_InventoryInteraction_HotBar2;
        public InputAction @HotBar3 => m_Wrapper.m_InventoryInteraction_HotBar3;
        public InputAction @HotBar4 => m_Wrapper.m_InventoryInteraction_HotBar4;
        public InputAction @HotBar5 => m_Wrapper.m_InventoryInteraction_HotBar5;
        public InputAction @HotBar6 => m_Wrapper.m_InventoryInteraction_HotBar6;
        public InputAction @HotBar7 => m_Wrapper.m_InventoryInteraction_HotBar7;
        public InputAction @HotBar8 => m_Wrapper.m_InventoryInteraction_HotBar8;
        public InputAction @HotBar9 => m_Wrapper.m_InventoryInteraction_HotBar9;
        public InputAction @HotBar0 => m_Wrapper.m_InventoryInteraction_HotBar0;
        public InputAction @MouseWheel => m_Wrapper.m_InventoryInteraction_MouseWheel;
        public InputAction @UseItem => m_Wrapper.m_InventoryInteraction_UseItem;
        public InputAction @ShowBackpack => m_Wrapper.m_InventoryInteraction_ShowBackpack;
        public InputAction @CloseMenu => m_Wrapper.m_InventoryInteraction_CloseMenu;
        public InputAction @Interaction => m_Wrapper.m_InventoryInteraction_Interaction;
        public InputActionMap Get() { return m_Wrapper.m_InventoryInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryInteractionActionsCallbackInterfaces.Add(instance);
            @HotBar1.started += instance.OnHotBar1;
            @HotBar1.performed += instance.OnHotBar1;
            @HotBar1.canceled += instance.OnHotBar1;
            @HotBar2.started += instance.OnHotBar2;
            @HotBar2.performed += instance.OnHotBar2;
            @HotBar2.canceled += instance.OnHotBar2;
            @HotBar3.started += instance.OnHotBar3;
            @HotBar3.performed += instance.OnHotBar3;
            @HotBar3.canceled += instance.OnHotBar3;
            @HotBar4.started += instance.OnHotBar4;
            @HotBar4.performed += instance.OnHotBar4;
            @HotBar4.canceled += instance.OnHotBar4;
            @HotBar5.started += instance.OnHotBar5;
            @HotBar5.performed += instance.OnHotBar5;
            @HotBar5.canceled += instance.OnHotBar5;
            @HotBar6.started += instance.OnHotBar6;
            @HotBar6.performed += instance.OnHotBar6;
            @HotBar6.canceled += instance.OnHotBar6;
            @HotBar7.started += instance.OnHotBar7;
            @HotBar7.performed += instance.OnHotBar7;
            @HotBar7.canceled += instance.OnHotBar7;
            @HotBar8.started += instance.OnHotBar8;
            @HotBar8.performed += instance.OnHotBar8;
            @HotBar8.canceled += instance.OnHotBar8;
            @HotBar9.started += instance.OnHotBar9;
            @HotBar9.performed += instance.OnHotBar9;
            @HotBar9.canceled += instance.OnHotBar9;
            @HotBar0.started += instance.OnHotBar0;
            @HotBar0.performed += instance.OnHotBar0;
            @HotBar0.canceled += instance.OnHotBar0;
            @MouseWheel.started += instance.OnMouseWheel;
            @MouseWheel.performed += instance.OnMouseWheel;
            @MouseWheel.canceled += instance.OnMouseWheel;
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
            @ShowBackpack.started += instance.OnShowBackpack;
            @ShowBackpack.performed += instance.OnShowBackpack;
            @ShowBackpack.canceled += instance.OnShowBackpack;
            @CloseMenu.started += instance.OnCloseMenu;
            @CloseMenu.performed += instance.OnCloseMenu;
            @CloseMenu.canceled += instance.OnCloseMenu;
            @Interaction.started += instance.OnInteraction;
            @Interaction.performed += instance.OnInteraction;
            @Interaction.canceled += instance.OnInteraction;
        }

        private void UnregisterCallbacks(IInventoryInteractionActions instance)
        {
            @HotBar1.started -= instance.OnHotBar1;
            @HotBar1.performed -= instance.OnHotBar1;
            @HotBar1.canceled -= instance.OnHotBar1;
            @HotBar2.started -= instance.OnHotBar2;
            @HotBar2.performed -= instance.OnHotBar2;
            @HotBar2.canceled -= instance.OnHotBar2;
            @HotBar3.started -= instance.OnHotBar3;
            @HotBar3.performed -= instance.OnHotBar3;
            @HotBar3.canceled -= instance.OnHotBar3;
            @HotBar4.started -= instance.OnHotBar4;
            @HotBar4.performed -= instance.OnHotBar4;
            @HotBar4.canceled -= instance.OnHotBar4;
            @HotBar5.started -= instance.OnHotBar5;
            @HotBar5.performed -= instance.OnHotBar5;
            @HotBar5.canceled -= instance.OnHotBar5;
            @HotBar6.started -= instance.OnHotBar6;
            @HotBar6.performed -= instance.OnHotBar6;
            @HotBar6.canceled -= instance.OnHotBar6;
            @HotBar7.started -= instance.OnHotBar7;
            @HotBar7.performed -= instance.OnHotBar7;
            @HotBar7.canceled -= instance.OnHotBar7;
            @HotBar8.started -= instance.OnHotBar8;
            @HotBar8.performed -= instance.OnHotBar8;
            @HotBar8.canceled -= instance.OnHotBar8;
            @HotBar9.started -= instance.OnHotBar9;
            @HotBar9.performed -= instance.OnHotBar9;
            @HotBar9.canceled -= instance.OnHotBar9;
            @HotBar0.started -= instance.OnHotBar0;
            @HotBar0.performed -= instance.OnHotBar0;
            @HotBar0.canceled -= instance.OnHotBar0;
            @MouseWheel.started -= instance.OnMouseWheel;
            @MouseWheel.performed -= instance.OnMouseWheel;
            @MouseWheel.canceled -= instance.OnMouseWheel;
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
            @ShowBackpack.started -= instance.OnShowBackpack;
            @ShowBackpack.performed -= instance.OnShowBackpack;
            @ShowBackpack.canceled -= instance.OnShowBackpack;
            @CloseMenu.started -= instance.OnCloseMenu;
            @CloseMenu.performed -= instance.OnCloseMenu;
            @CloseMenu.canceled -= instance.OnCloseMenu;
            @Interaction.started -= instance.OnInteraction;
            @Interaction.performed -= instance.OnInteraction;
            @Interaction.canceled -= instance.OnInteraction;
        }

        public void RemoveCallbacks(IInventoryInteractionActions instance)
        {
            if (m_Wrapper.m_InventoryInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryInteractionActions @InventoryInteraction => new InventoryInteractionActions(this);

    // WeaponControl
    private readonly InputActionMap m_WeaponControl;
    private List<IWeaponControlActions> m_WeaponControlActionsCallbackInterfaces = new List<IWeaponControlActions>();
    private readonly InputAction m_WeaponControl_QuickUse_0;
    private readonly InputAction m_WeaponControl_QuickUse_1;
    private readonly InputAction m_WeaponControl_QuickUse_2;
    private readonly InputAction m_WeaponControl_QuickUse_3;
    private readonly InputAction m_WeaponControl_QuickUse_4;
    private readonly InputAction m_WeaponControl_SwitchWeapon;
    private readonly InputAction m_WeaponControl_Fire;
    private readonly InputAction m_WeaponControl_Aim;
    private readonly InputAction m_WeaponControl_Reload;
    public struct WeaponControlActions
    {
        private @TestPlayerInput m_Wrapper;
        public WeaponControlActions(@TestPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @QuickUse_0 => m_Wrapper.m_WeaponControl_QuickUse_0;
        public InputAction @QuickUse_1 => m_Wrapper.m_WeaponControl_QuickUse_1;
        public InputAction @QuickUse_2 => m_Wrapper.m_WeaponControl_QuickUse_2;
        public InputAction @QuickUse_3 => m_Wrapper.m_WeaponControl_QuickUse_3;
        public InputAction @QuickUse_4 => m_Wrapper.m_WeaponControl_QuickUse_4;
        public InputAction @SwitchWeapon => m_Wrapper.m_WeaponControl_SwitchWeapon;
        public InputAction @Fire => m_Wrapper.m_WeaponControl_Fire;
        public InputAction @Aim => m_Wrapper.m_WeaponControl_Aim;
        public InputAction @Reload => m_Wrapper.m_WeaponControl_Reload;
        public InputActionMap Get() { return m_Wrapper.m_WeaponControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponControlActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponControlActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponControlActionsCallbackInterfaces.Add(instance);
            @QuickUse_0.started += instance.OnQuickUse_0;
            @QuickUse_0.performed += instance.OnQuickUse_0;
            @QuickUse_0.canceled += instance.OnQuickUse_0;
            @QuickUse_1.started += instance.OnQuickUse_1;
            @QuickUse_1.performed += instance.OnQuickUse_1;
            @QuickUse_1.canceled += instance.OnQuickUse_1;
            @QuickUse_2.started += instance.OnQuickUse_2;
            @QuickUse_2.performed += instance.OnQuickUse_2;
            @QuickUse_2.canceled += instance.OnQuickUse_2;
            @QuickUse_3.started += instance.OnQuickUse_3;
            @QuickUse_3.performed += instance.OnQuickUse_3;
            @QuickUse_3.canceled += instance.OnQuickUse_3;
            @QuickUse_4.started += instance.OnQuickUse_4;
            @QuickUse_4.performed += instance.OnQuickUse_4;
            @QuickUse_4.canceled += instance.OnQuickUse_4;
            @SwitchWeapon.started += instance.OnSwitchWeapon;
            @SwitchWeapon.performed += instance.OnSwitchWeapon;
            @SwitchWeapon.canceled += instance.OnSwitchWeapon;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IWeaponControlActions instance)
        {
            @QuickUse_0.started -= instance.OnQuickUse_0;
            @QuickUse_0.performed -= instance.OnQuickUse_0;
            @QuickUse_0.canceled -= instance.OnQuickUse_0;
            @QuickUse_1.started -= instance.OnQuickUse_1;
            @QuickUse_1.performed -= instance.OnQuickUse_1;
            @QuickUse_1.canceled -= instance.OnQuickUse_1;
            @QuickUse_2.started -= instance.OnQuickUse_2;
            @QuickUse_2.performed -= instance.OnQuickUse_2;
            @QuickUse_2.canceled -= instance.OnQuickUse_2;
            @QuickUse_3.started -= instance.OnQuickUse_3;
            @QuickUse_3.performed -= instance.OnQuickUse_3;
            @QuickUse_3.canceled -= instance.OnQuickUse_3;
            @QuickUse_4.started -= instance.OnQuickUse_4;
            @QuickUse_4.performed -= instance.OnQuickUse_4;
            @QuickUse_4.canceled -= instance.OnQuickUse_4;
            @SwitchWeapon.started -= instance.OnSwitchWeapon;
            @SwitchWeapon.performed -= instance.OnSwitchWeapon;
            @SwitchWeapon.canceled -= instance.OnSwitchWeapon;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IWeaponControlActions instance)
        {
            if (m_Wrapper.m_WeaponControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponControlActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponControlActions @WeaponControl => new WeaponControlActions(this);

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private List<INewactionmapActions> m_NewactionmapActionsCallbackInterfaces = new List<INewactionmapActions>();
    private readonly InputAction m_Newactionmap_Switch;
    private readonly InputAction m_Newactionmap_Jump;
    public struct NewactionmapActions
    {
        private @TestPlayerInput m_Wrapper;
        public NewactionmapActions(@TestPlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Switch => m_Wrapper.m_Newactionmap_Switch;
        public InputAction @Jump => m_Wrapper.m_Newactionmap_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void AddCallbacks(INewactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Add(instance);
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(INewactionmapActions instance)
        {
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_NewactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ICharacterControlActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
    }
    public interface IInventoryInteractionActions
    {
        void OnHotBar1(InputAction.CallbackContext context);
        void OnHotBar2(InputAction.CallbackContext context);
        void OnHotBar3(InputAction.CallbackContext context);
        void OnHotBar4(InputAction.CallbackContext context);
        void OnHotBar5(InputAction.CallbackContext context);
        void OnHotBar6(InputAction.CallbackContext context);
        void OnHotBar7(InputAction.CallbackContext context);
        void OnHotBar8(InputAction.CallbackContext context);
        void OnHotBar9(InputAction.CallbackContext context);
        void OnHotBar0(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
        void OnShowBackpack(InputAction.CallbackContext context);
        void OnCloseMenu(InputAction.CallbackContext context);
        void OnInteraction(InputAction.CallbackContext context);
    }
    public interface IWeaponControlActions
    {
        void OnQuickUse_0(InputAction.CallbackContext context);
        void OnQuickUse_1(InputAction.CallbackContext context);
        void OnQuickUse_2(InputAction.CallbackContext context);
        void OnQuickUse_3(InputAction.CallbackContext context);
        void OnQuickUse_4(InputAction.CallbackContext context);
        void OnSwitchWeapon(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
    public interface INewactionmapActions
    {
        void OnSwitch(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
